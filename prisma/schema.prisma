// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  password_hash    String
  role             UserRole
  phone_number     String?
  logo  String?
  bio String?
  //TODO change this to logo and it will only be used for agents.
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  saved_properties  Property[]     @relation("saved_properties")  
  // For Agents
  is_verified      Boolean        @default(false)
  verification_docs Json?          // Changed to JSON
  properties       Property[]     @relation("user_properties") // properties this user owns (agent)
  // New relations for leads
  submittedLeads   Lead[]         @relation("LeadSubmitter")  // leads this user submitted
  handledLeads     Lead[]         @relation("LeadHandler") 

  notifications Notification[]  
  // Subscription     Subscription?  @relation(fields: [subscriptionId], references: [id])
  // subscriptionId   String?

  saved_searches SavedSearch[]
}


model Property {
  id             String    @id @default(uuid())
  agent       User?      @relation("user_properties", fields: [agentId], references: [id])  
  agentId        String?
  title          String
  description    String
  bedrooms       String
  bathrooms      String
  toilets        String
  size_sqm       Float
  price          Float
  discount_percent Float?
  discounted_price Float?
  property_type  PropertyType
  listing_type   ListingType
  furnishing     Furnishing
  status         PropertyStatus
  amenities      String[]
  date_added     DateTime @default(now())
  date_modified  DateTime @updatedAt
  images         String[]
  street    String
  city      String
  state     String
  //TODO add postal code
  lat Float?
  lon Float?
  parking_spaces  String?
 saved_by     User[]    @relation("saved_properties")
  approval_status    ApprovalStatus @default(pending)
  approval_notes String?

//  For Rentals
  availability   String?
  tenancy_info String?
  service_charge String?
  min_tenancy String?
  deposit Float?

  leads Lead[]
}

model Lead {
  id          String    @id @default(uuid())
  property    Property? @relation(fields: [propertyId], references: [id])
  propertyId  String?
  
  // The user who submitted the lead (can be null if guest)
  user        User?     @relation("LeadSubmitter", fields: [userId], references: [id])
  userId      String?

  // The agent assigned to handle the lead (nullable until assigned)
  agent       User?     @relation("LeadHandler", fields: [agentId], references: [id])
  agentId     String?

  name        String?    
  // Name of lead (if guest, they can leave name). For now since user needs to be registered, then this is optional
  email       String?    // Email of lead Optional for now
  // phone_number       String?   // Optional phone
  message     String   // Optional inquiry message
  status      LeadStatus @default(new)
  closure_reason String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  receipient   User     @relation(fields: [receipientId], references: [id])
  receipientId String
  title       String   @default("")
  type        NotificationType @default(IN_APP)
  message     String   @default("")
  linkUrl     String?  // For in-app deep links (e.g., property, lead)
  metadata    Json?    // For extra data (e.g., { propertyId: 'uuid' })
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //   category String? // e.g., 'Lead', 'Property', 'SavedSearch'
  // action String? // e.g., 'created', 'matched', 'replied'

}

model SavedSearch {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  name        String?          // optional label for UI, e.g., "Lagos Apartments"
  query       Json             // store query parameters (location, min/max price, etc.)
  sendAlerts  Boolean @default(false)  // whether to notify when new matching listings appear

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // optional: frequency, expiration, etc.

  SearchAlertLog SearchAlertLog[]
}

model SearchAlertLog {
  id             String   @id @default(uuid())
  savedSearch    SavedSearch @relation(fields: [savedSearchId], references: [id])
  savedSearchId  String

  sentAt         DateTime @default(now())
  matchedCount   Int
  deliveryType   NotificationType // IN_APP or EMAIL
}



enum NotificationType {
  IN_APP
  EMAIL
}


enum LeadStatus {
  new
  contacted
  in_progress
  closed
}


// model Subscription {
//   id          String     @id @default(uuid())
//   agent       User       @relation
//   tier        SubscriptionTier
//   is_active   Boolean    @default(true)
//   start_date  DateTime   @default(now())
//   end_date    DateTime
//   renewed_at  DateTime?
//   created_at  DateTime   @default(now())
// }

enum UserRole {
  buyer
  agent
  admin
}

enum PropertyType {
  apartment
  detached
  semi_detached
  terrace
  land
}

enum ListingType {
  sale
  rent
  shortlet
}

enum Furnishing {
  furnished
  unfurnished
  partly_furnished
}

enum PropertyStatus {
  available
  sold
  rented
  unavailable
}

enum SubscriptionTier {
  basic
  premium
  enterprise
}
enum ApprovalStatus {
  approved
  pending
  rejected
}


